@startuml

class MindMap {
	id: u64
	name: String
}

MindMap --> "Many" Node : nodes
MindMap --> "Many" Permission : permissions
MindMap --* PermissionType : default_permission
MindMap --> "Many" History : history

class Permission {
	id: u64
}

Permission --> User : user
Permission --* PermissionType : type

enum PermissionType {
	Read
	Write
	Moderate
	Admin
}

class Node {
	id: u64
	text: String
	color: Color
	tags: Vec<String>
}

Node "0 or 1" <-- Node : parent

class Comment {
	id: u64
	message: String
}

Node <-- Comment : node

class Edge {
	id: u64
	brief: String
	description: String
}

note left of Edge
	An "edge" is an extra edge. 
	There is already a tree structure,
	but the users want another edge to
	act as some kind of "pointer".
end note

Edge --> Node : from
Edge --> Node : to

enum EdgeStyle {
	Dotted
	Full
	Dashes
}

Edge --* EdgeStyle : style

class User {
	id: u64
	username: String
	password: String (bcrypt)
}

class History {
	id: u64
	time: Time
}

History --> User : user

enum MindMapEvent {
	MindMapCreated
	---
	NodeAdded(Node)
	NodeDeleted(Node)
	NodeModified(Node, NodeEvent)
	---
	EdgeAdded(Edge)
	EdgeDeleted(Edge)
	EdgeModified(Edge, EdgeEvent)
	---
	PermissionAdded(Permission)
	PermissionDeleted(Permission)
	PermissionModified(Permission, PermissionEvent)
	---
	CommentAdded(Comment)
	CommentDeleted(Comment)
	CommentModified(Comment, CommentEvent)
}

History --* MindMapEvent : event

enum NodeEvent {
	Moved(Node) // Parent changed to Node
	Text(String)
	Color(Color)
}

MindMapEvent ... NodeEvent

enum EdgeEvent {
	Brief(String)
	Description(String)
	Color(Color)
	Style(EdgeStyle)
}

MindMapEvent ... EdgeEvent

enum PermissionEvent {
	Type(PermissionType)
}

MindMapEvent ... PermissionEvent

enum CommentEvent {
	Message(String)
}

MindMapEvent ... CommentEvent

package Legend <<Rectangle>> {
	class A
	class B
	A --* B : Direct inclusion in A

	class C
	class D
	C --> "Many" D : C holds a reference to D

	class E
	class F
	E ... F : See also F

	together {
		note as legend_note_1
			An edge between two classes contains
			the field on which it will be "kept"
			in the class on the symbol-less end
			of the edge. For example, A has a B
			field, but B doesn't have an A field.
		end note

		note as legend_note_2
			A keyword at an end of an edge means
			that the class at the other end has
			"keyword" the class at the keyword end.
			Example is C --> D,
			C <b>holds <i>many</i> references to D</b>.
		end note

		legend_note_1 -down-> legend_note_2
	}
}

@enduml
